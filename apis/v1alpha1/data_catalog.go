// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DataCatalogSpec defines the desired state of DataCatalog.
//
// Contains information about a data catalog in an Amazon Web Services account.
//
// In the Athena console, data catalogs are listed as "data sources" on the
// Data sources page under the Data source name column.
type DataCatalogSpec struct {

	// A description of the data catalog to be created.
	Description *string `json:"description,omitempty"`
	// The name of the data catalog to create. The catalog name must be unique for
	// the Amazon Web Services account and can use a maximum of 127 alphanumeric,
	// underscore, at sign, or hyphen characters. The remainder of the length constraint
	// of 256 is reserved for use by Athena.
	// +kubebuilder:validation:Required
	Name *string `json:"name"`
	// Specifies the Lambda function or functions to use for creating the data catalog.
	// This is a mapping whose values depend on the catalog type.
	//
	//   - For the HIVE data catalog type, use the following syntax. The metadata-function
	//     parameter is required. The sdk-version parameter is optional and defaults
	//     to the currently supported version. metadata-function=lambda_arn, sdk-version=version_number
	//
	//   - For the LAMBDA data catalog type, use one of the following sets of required
	//     parameters, but not both. If you have one Lambda function that processes
	//     metadata and another for reading the actual data, use the following syntax.
	//     Both parameters are required. metadata-function=lambda_arn, record-function=lambda_arn
	//     If you have a composite Lambda function that processes both metadata and
	//     data, use the following syntax to specify your Lambda function. function=lambda_arn
	//
	//   - The GLUE type takes a catalog ID parameter and is required. The catalog_id
	//     is the account ID of the Amazon Web Services account to which the Glue
	//     Data Catalog belongs. catalog-id=catalog_id The GLUE data catalog type
	//     also applies to the default AwsDataCatalog that already exists in your
	//     account, of which you can have only one and cannot modify.
	Parameters map[string]*string `json:"parameters,omitempty"`
	// A list of comma separated tags to add to the data catalog that is created.
	Tags []*Tag `json:"tags,omitempty"`
	// The type of data catalog to create: LAMBDA for a federated catalog, HIVE
	// for an external hive metastore, or GLUE for an Glue Data Catalog.
	// +kubebuilder:validation:Required
	Type *string `json:"type,omitempty"`
}

// DataCatalogStatus defines the observed state of DataCatalog
type DataCatalogStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
}

// DataCatalog is the Schema for the DataCatalogs API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type DataCatalog struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataCatalogSpec   `json:"spec,omitempty"`
	Status            DataCatalogStatus `json:"status,omitempty"`
}

// DataCatalogList contains a list of DataCatalog
// +kubebuilder:object:root=true
type DataCatalogList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataCatalog `json:"items"`
}

func init() {
	SchemeBuilder.Register(&DataCatalog{}, &DataCatalogList{})
}

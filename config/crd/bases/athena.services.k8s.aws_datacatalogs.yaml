---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.2
  name: datacatalogs.athena.services.k8s.aws
spec:
  group: athena.services.k8s.aws
  names:
    kind: DataCatalog
    listKind: DataCatalogList
    plural: datacatalogs
    singular: datacatalog
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: DataCatalog is the Schema for the DataCatalogs API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: |-
              DataCatalogSpec defines the desired state of DataCatalog.

              Contains information about a data catalog in an Amazon Web Services account.

              In the Athena console, data catalogs are listed as "data sources" on the
              Data sources page under the Data source name column.
            properties:
              description:
                description: A description of the data catalog to be created.
                type: string
              name:
                description: |-
                  The name of the data catalog to create. The catalog name must be unique for
                  the Amazon Web Services account and can use a maximum of 127 alphanumeric,
                  underscore, at sign, or hyphen characters. The remainder of the length constraint
                  of 256 is reserved for use by Athena.
                type: string
              parameters:
                additionalProperties:
                  type: string
                description: |-
                  Specifies the Lambda function or functions to use for creating the data catalog.
                  This is a mapping whose values depend on the catalog type.

                     * For the HIVE data catalog type, use the following syntax. The metadata-function
                     parameter is required. The sdk-version parameter is optional and defaults
                     to the currently supported version. metadata-function=lambda_arn, sdk-version=version_number

                     * For the LAMBDA data catalog type, use one of the following sets of required
                     parameters, but not both. If you have one Lambda function that processes
                     metadata and another for reading the actual data, use the following syntax.
                     Both parameters are required. metadata-function=lambda_arn, record-function=lambda_arn
                     If you have a composite Lambda function that processes both metadata and
                     data, use the following syntax to specify your Lambda function. function=lambda_arn

                     * The GLUE type takes a catalog ID parameter and is required. The catalog_id
                     is the account ID of the Amazon Web Services account to which the Glue
                     Data Catalog belongs. catalog-id=catalog_id The GLUE data catalog type
                     also applies to the default AwsDataCatalog that already exists in your
                     account, of which you can have only one and cannot modify.
                type: object
              tags:
                description: A list of comma separated tags to add to the data catalog
                  that is created.
                items:
                  description: |-
                    A label that you assign to a resource. Athena resources include workgroups,
                    data catalogs, and capacity reservations. Each tag consists of a key and
                    an optional value, both of which you define. For example, you can use tags
                    to categorize Athena resources by purpose, owner, or environment. Use a consistent
                    set of tag keys to make it easier to search and filter the resources in your
                    account. For best practices, see Tagging Best Practices (https://docs.aws.amazon.com/whitepapers/latest/tagging-best-practices/tagging-best-practices.html).
                    Tag keys can be from 1 to 128 UTF-8 Unicode characters, and tag values can
                    be from 0 to 256 UTF-8 Unicode characters. Tags can use letters and numbers
                    representable in UTF-8, and the following characters: + - = . _ : / @. Tag
                    keys and values are case-sensitive. Tag keys must be unique per resource.
                    If you specify more than one tag, separate them by commas.
                  properties:
                    key:
                      type: string
                    value:
                      type: string
                  type: object
                type: array
              type:
                description: |-
                  The type of data catalog to create: LAMBDA for a federated catalog, HIVE
                  for an external hive metastore, or GLUE for an Glue Data Catalog.
                type: string
            required:
            - name
            - type
            type: object
          status:
            description: DataCatalogStatus defines the observed state of DataCatalog
            properties:
              ackResourceMetadata:
                description: |-
                  All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
                  that is used to contain resource sync state, account ownership,
                  constructed ARN for the resource
                properties:
                  arn:
                    description: |-
                      ARN is the Amazon Resource Name for the resource. This is a
                      globally-unique identifier and is set only by the ACK service controller
                      once the controller has orchestrated the creation of the resource OR
                      when it has verified that an "adopted" resource (a resource where the
                      ARN annotation was set by the Kubernetes user on the CR) exists and
                      matches the supplied CR's Spec field values.
                      https://github.com/aws/aws-controllers-k8s/issues/270
                    type: string
                  ownerAccountID:
                    description: |-
                      OwnerAccountID is the AWS Account ID of the account that owns the
                      backend AWS service API resource.
                    type: string
                  region:
                    description: Region is the AWS region in which the resource exists
                      or will exist.
                    type: string
                required:
                - ownerAccountID
                - region
                type: object
              conditions:
                description: |-
                  All CRS managed by ACK have a common `Status.Conditions` member that
                  contains a collection of `ackv1alpha1.Condition` objects that describe
                  the various terminal states of the CR and its backend AWS service API
                  resource
                items:
                  description: |-
                    Condition is the common struct used by all CRDs managed by ACK service
                    controllers to indicate terminal states  of the CR and its backend AWS
                    service API resource
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type is the type of the Condition
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
